# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure(2) do |config|
  # Spin up the virtual machine with 4 cores and 2GB RAM.
  # This is optional, but speeds things up greatly if you do any compiling.
	config.vm.provider "virtualbox" do |v|
      v.memory = 2048
      v.cpus = 4
  end
	
  # Specify the Vagrant image we want to use for our host.
  config.vm.box = "chef/centos-6.6"

  # Provision with Docker. This will automatically install Docker on the host VM.
  config.vm.provision "docker"

  # During Docker provisioning, the vagrant user is added to the docker group, but this doesn't take effect until login.
  # This is a workaround I found here: https://github.com/mitchellh/vagrant/issues/3998
  # Kills off the SSH sessions so Vagrant is forced to re-establish the SSH connection.
  config.vm.provision "shell", inline:
     "ps aux | grep 'sshd:' | awk '{print $2}' | xargs kill"

  # Add any folders you want to use in your host or containers.
  # I mount the entire root of the project, so /app will contain my docker-compose.yml.
  config.vm.synced_folder "..", "/app"

  # Any ports that you want to access from the machine running the VM need to be forwarded out.
  # This should correspond to ports that are opened externally on your containers.
  config.vm.network "forwarded_port", guest: 80, host: 80

  # Always use Vagrant's default insecure key
  config.ssh.insert_key = false
	
  # These last steps are optional, but when working though issues with my docker-compose.yml and Dockerfiles, I found
  # it to be pretty handy to be able to SSH to the VM and run docker-compose directly. Eventually, I just added it to
  # be installed here.
	config.vm.provision "shell", inline:
      "curl -L https://github.com/docker/compose/releases/download/1.2.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose"

  config.vm.provision "shell", inline:
      "sudo cp ~/docker-compose /usr/local/bin/docker-compose"

  config.vm.provision "shell", inline:
      "sudo chmod +x /usr/local/bin/docker-compose"
	
end
